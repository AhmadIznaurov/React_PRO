import React from 'react';

export const FetchReact = () => {
   // Асинхронный код уходит работать     .................. дальше на фон
   // const  promise = new Promise( (resolve, reject) => {
   //     if( ){
   //         return resolve()
   //     }
   //     return reject()
   // })
   //  promise.then((res) => {
   //      // Обработка результата выполнения промиса
   //      console.log(res);
   //  }).catch((e) => {
   //      // Обработка ошибки в случаке его возникновения в процессе запроса
   //      console.log(e);
   //  })
 // обернутый код с примером использования промиса

    const getPhotos = () => {
        return fetch("https://jsonplaceholder.typicode.com/photos")
            .then((response) => {
                if (!response.ok) {
                    throw new Error('ERROR')
                }
                return response.json()
                // это метод объекта Response в объекте fetch(), который преобразует ответ от сервера в формат JSON.
                // В качестве аргумента метод json() может принимать функцию преобразования,
                // которая может изменять данные перед их преобразованием в формат JSON.
            })
            .then((photos) => {
                console.log(photos)
            }).catch((e) => {
                console.log(e)
            })
    }

   getPhotos()
    return ("Hello promise")
}





//.......................................................
// JS (ES6) - однопоточный язык программирования
// Синхронность - Sync
// Асинхронность - Async
//.......................................................

//........................................................
// Объект Promise имеет 3 состояния
// 1. Pending(Ожидаемый)      ------- Pending - текущее состояние обещания, когда функция выполняется и ждет результата
// 2. Fulfilled(Выполненный)  ------- Fulfilled - состояние обещания, когда функция успешно выполнилась и вернула результат
// 3. Rejected(Отклоненный)   ------- Rejected - состояние обещания, когда функция завершилась ошибкой и вернула ошибку.
//.......................................................